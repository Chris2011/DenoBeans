package io.github.chris2011.netbeans.plugins.denobeans.options;

import io.github.chris2011.netbeans.plugins.denobeans.DenoExecutable;
import java.awt.EventQueue;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.progress.ProgressHandle;
import org.openide.awt.NotificationDisplayer;
import org.openide.awt.StatusDisplayer;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.ChangeSupport;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.Utilities;

public final class DenoOptionsPanel extends JPanel implements ChangeListener {

    private static final long serialVersionUID = 1L;
    private final ChangeSupport changeSupport = new ChangeSupport(this);

    public DenoOptionsPanel() {
        assert EventQueue.isDispatchThread();

        initComponents();

        init();
    }

    private void init() {
        DocumentListener defaultDocumentListener = new DefaultDocumentListener();
        denoExecutablePathTextField.getDocument().addDocumentListener(defaultDocumentListener);
    }

    public static DenoOptionsPanel create() {
        DenoOptionsPanel panel = new DenoOptionsPanel();

        return panel;
    }

    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        changeSupport.removeChangeListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        denoExecutablePathLabel = new javax.swing.JLabel();
        denoExecutablePathTextField = new javax.swing.JTextField();
        denoExecutableFolderBrowseButton = new javax.swing.JButton();
        denoExecutablePathBrowseButton = new javax.swing.JButton();
        cssNanoLabel = new javax.swing.JLabel();
        downloadInstallLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(denoExecutablePathLabel, org.openide.util.NbBundle.getMessage(DenoOptionsPanel.class, "DenoOptionsPanel.denoExecutablePathLabel.text")); // NOI18N

        denoExecutablePathTextField.setText(org.openide.util.NbBundle.getMessage(DenoOptionsPanel.class, "DenoOptionsPanel.denoExecutablePathTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(denoExecutableFolderBrowseButton, org.openide.util.NbBundle.getMessage(DenoOptionsPanel.class, "DenoOptionsPanel.denoExecutableFolderBrowseButton.text")); // NOI18N
        denoExecutableFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denoExecutableFolderBrowseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(denoExecutablePathBrowseButton, org.openide.util.NbBundle.getMessage(DenoOptionsPanel.class, "DenoOptionsPanel.denoExecutablePathBrowseButton.text")); // NOI18N
        denoExecutablePathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denoExecutablePathBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(denoExecutablePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(denoExecutablePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(denoExecutableFolderBrowseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(denoExecutablePathBrowseButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(denoExecutablePathLabel)
                .addComponent(denoExecutablePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(denoExecutableFolderBrowseButton)
                .addComponent(denoExecutablePathBrowseButton))
        );

        org.openide.awt.Mnemonics.setLocalizedText(cssNanoLabel, org.openide.util.NbBundle.getMessage(DenoOptionsPanel.class, "DenoOptionsPanel.cssNanoLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(downloadInstallLabel, org.openide.util.NbBundle.getMessage(DenoOptionsPanel.class, "DenoOptionsPanel.downloadInstallLabel.text")); // NOI18N
        downloadInstallLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadInstallLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(cssNanoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 326, Short.MAX_VALUE)
                        .addComponent(downloadInstallLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cssNanoLabel)
                    .addComponent(downloadInstallLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @NbBundle.Messages("DenoOptionsPanel.browse.title=Select Deno executable")
    private void denoExecutableFolderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denoExecutableFolderBrowseButtonActionPerformed
        File file = new FileChooserBuilder(DenoOptionsPanel.class)
                .setFilesOnly(true)
                .setTitle(Bundle.DenoOptionsPanel_browse_title())
                .showOpenDialog();
        if (file != null) {
            denoExecutablePathTextField.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_denoExecutableFolderBrowseButtonActionPerformed

    @NbBundle.Messages("DenoOptionsPanel.executable.notFound=No Deno executable found.")
    private void denoExecutablePathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denoExecutablePathBrowseButtonActionPerformed
        List<String> ngCliPaths = FileUtils.findFileOnUsersPath(DenoExecutable.DENO_EXECUTABLE_NAME);

        if (ngCliPaths.isEmpty()) {
            StatusDisplayer.getDefault().setStatusText(Bundle.DenoOptionsPanel_executable_notFound());
        } else {
            denoExecutablePathTextField.setText(ngCliPaths.get(0));
        }
    }//GEN-LAST:event_denoExecutablePathBrowseButtonActionPerformed

    private static final RequestProcessor RP = new RequestProcessor(DenoOptionsPanel.class);

    private void downloadInstallLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadInstallLabelMouseClicked
        final String DOWNLOAD_URL = "https://github.com/Chris2011/minifierbeans/releases/download/1.0.0-cp/custom-packages.zip";
        
        try {
            downloadDenoExecutable(DOWNLOAD_URL, "");
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_downloadInstallLabelMouseClicked

    private static final String DENO_INSTALLER_URL;
    
    static {
        if (Utilities.isWindows()) {
            DENO_INSTALLER_URL = "https://deno.land/x/install/install.ps1"; // NOI18N
        } else {
            DENO_INSTALLER_URL = "https://deno.land/x/install/install.sh"; // NOI18N
        }
    }
    
    /**
     * Downloads a file from a URL
     *
     * @param fileURL HTTP URL of the file to be downloaded
     * @param saveDir path of the directory to save the file
     * @throws IOException
     */
    private void downloadDenoExecutable(String fileURL, String saveDir)
            throws IOException {
        final int BUFFER_SIZE = 4096;
        final ProgressHandle handle = ProgressHandle.createHandle("Downloading Deno installer");
        handle.start(0);

        URL url = new URL(fileURL);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        int responseCode = httpConn.getResponseCode();

        // always check HTTP response code first
        if (responseCode == HttpURLConnection.HTTP_OK) {
            String fileName = "custom-packages.zip";

            // opens input stream from the HTTP connection
            InputStream inputStream = httpConn.getInputStream();

            final File theFile = new File(saveDir + "/.netbeans/minifierbeans");
            theFile.mkdirs();

            final String saveFilePath = saveDir + "/.netbeans/minifierbeans/" + fileName;

            // opens an output stream to save into file
            FileOutputStream outputStream = new FileOutputStream(saveFilePath);

            int bytesRead = -1;
            byte[] buffer = new byte[BUFFER_SIZE];
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }

            outputStream.close();
            inputStream.close();
            handle.finish();

            RP.post(() -> {
                // TODO: Execute the downloaded script.
//                try {
//                } catch (IOException ex) {
//                    handle.finish();
//                    Exceptions.printStackTrace(ex);
//                }
            });
        } else {
            handle.finish();
            NotificationDisplayer.getDefault().notify("Error while downloading", NotificationDisplayer.Priority.HIGH.getIcon(), "No file to download. Server replied HTTP code: " + responseCode, null);
        }

        httpConn.disconnect();
    }
    
//    void load() {
//    }
//
//    void store() {
//    }
    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cssNanoLabel;
    private javax.swing.JButton denoExecutableFolderBrowseButton;
    private javax.swing.JButton denoExecutablePathBrowseButton;
    private javax.swing.JLabel denoExecutablePathLabel;
    private javax.swing.JTextField denoExecutablePathTextField;
    private javax.swing.JLabel downloadInstallLabel;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    void fireChange() {
        changeSupport.fireChange();
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        fireChange();
    }

    private final class DefaultDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            processUpdate();
        }

        private void processUpdate() {
            fireChange();
        }

    }
}
